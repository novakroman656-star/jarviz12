<!doctype html>

<html lang="uk">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Jarviz 12 — Мозок & Аналітика (Enhanced)</title>
  <meta name="description" content="Jarviz 12 — інтерактивний головний мозок з аналітикою" />
  <meta name="theme-color" content="#0f1724" />  <!-- Chart.js CDN -->  <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"></script>  <style>
    :root{--bg:#070709;--card:#0f1724;--accent:#06b6a4;--muted:#9ca3af;--glass: rgba(255,255,255,0.03)}
    *{box-sizing:border-box}body{margin:0;font-family:system-ui,-apple-system,'Segoe UI',Roboto,'Helvetica Neue',Arial;color:#e6eef2;background:linear-gradient(180deg,#020202 0%, #060617 100%);}    
    header{display:flex;align-items:center;gap:16px;padding:18px 20px;border-bottom:1px solid rgba(255,255,255,0.03);}    
    h1{font-size:18px;margin:0;color:var(--accent)}
    .container{display:grid;grid-template-columns:1fr 480px;gap:18px;padding:18px;min-height:calc(100vh - 70px)}
    .left{background:var(--card);padding:18px;border-radius:14px;box-shadow:0 6px 20px rgba(2,6,23,0.6);}    
    .right{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));padding:16px;border-radius:12px;}

    /* Brain canvas */
    .brain-wrap{display:flex;flex-direction:column;align-items:center;gap:12px}
    svg.brain{width:100%;max-width:980px;height:460px}
    .neuron{cursor:pointer;transition:transform .18s ease,opacity .14s}
    .neuron:hover{transform:scale(1.08)}

    /* animated pulse based on data-load */
    .pulse{animation: pulse 1.6s infinite ease-in-out}
    @keyframes pulse{0%{transform:scale(1);opacity:1}50%{transform:scale(1.06);opacity:0.9}100%{transform:scale(1);opacity:1}}

    /* Cards */
    .card{background:var(--glass);padding:12px;border-radius:12px;color:#dfe7ea}
    .controls{display:flex;gap:8px;align-items:center}
    .btn{background:var(--accent);border:none;padding:10px 14px;border-radius:10px;color:#041017;font-weight:700;cursor:pointer}
    .btn.ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);color:var(--muted)}

    .stat-grid{display:grid;grid-template-columns:repeat(3,1fr);gap:8px;margin-top:10px}
    .stat{background:rgba(255,255,255,0.02);padding:10px;border-radius:10px;text-align:center}
    .stat .num{font-size:18px;font-weight:700;color:var(--accent)}

    /* right column */
    .chart-wrap{height:200px}
    footer{padding:12px;text-align:center;color:var(--muted);font-size:13px}

    .history-table{width:100%;border-collapse:collapse;margin-top:8px}
    .history-table th,.history-table td{padding:6px 8px;border-bottom:1px solid rgba(255,255,255,0.03);font-size:13px}

    @media(max-width:980px){.container{grid-template-columns:1fr}.right{order:2}.left{order:1}}
  </style></head>
<body>
  <header>
    <h1>Jarviz 12 — Головний Мозок (Enhanced)</h1>
    <div style="margin-left:auto;display:flex;gap:8px;align-items:center">
      <button id="installBtn" class="btn ghost">Встановити (PWA)</button>
      <button id="voiceBtn" class="btn">Голос</button>
      <button id="startRec" class="btn ghost">Розпізнати голос</button>
    </div>
  </header>  <main class="container">
    <section class="left">
      <div class="brain-wrap card">
        <h2 style="margin:0;color:#dff6ef">Головний мозок — нейронна панель</h2>
        <svg class="brain" viewBox="0 0 1200 600" xmlns="http://www.w3.org/2000/svg" aria-label="SVG brain network">
          <defs>
            <filter id="glow"><feGaussianBlur stdDeviation="6" result="b"/><feMerge><feMergeNode in="b"/><feMergeNode in="SourceGraphic"/></feMerge></filter>
          </defs>
          <g id="links" stroke="rgba(255,255,255,0.06)" stroke-width="2">
            <line x1="200" y1="200" x2="350" y2="160" />
            <line x1="350" y1="160" x2="520" y2="220" />
            <line x1="520" y1="220" x2="700" y2="180" />
            <line x1="700" y1="180" x2="920" y2="240" />
            <line x1="900" y1="320" x2="700" y2="360" />
            <line x1="550" y1="400" x2="700" y2="360" />
            <line x1="350" y1="420" x2="550" y2="400" />
            <line x1="220" y1="340" x2="350" y2="420" />
          </g><g id="neurons" fill="none" stroke-width="0">
        <!-- neurons rendered by JS for dynamic attributes -->
      </g>
    </svg>

    <div style="width:100%;display:flex;gap:8px;align-items:center;justify-content:space-between">
      <div class="controls">
        <button id="refreshData" class="btn">Оновити аналітику</button>
        <button id="exportBtn" class="btn ghost">Експорт JSON</button>
        <button id="exportCSV" class="btn ghost">Експорт CSV</button>
      </div>
      <div style="text-align:right;color:var(--muted)">Останнє оновлення: <span id="lastUpdate">зараз</span></div>
    </div>

    <div class="stat-grid" style="width:100%">
      <div class="stat"><div class="num" id="stat-1">—</div><div class="label">Сигнали/хв</div></div>
      <div class="stat"><div class="num" id="stat-2">—</div><div class="label">Аналізи</div></div>
      <div class="stat"><div class="num" id="stat-3">—</div><div class="label">Нейронів активних</div></div>
    </div>

  </div>

  <div style="margin-top:12px" class="card">
    <h3 style="margin:0 0 8px 0;color:#dff6ef">Деталі нейрона</h3>
    <div id="neuronInfo">Натисни на нейрон, щоб побачити метрики та логіку.</div>
  </div>

  <div style="margin-top:12px" class="card">
    <h3 style="margin:0 0 8px 0;color:#dff6ef">Історія оновлень</h3>
    <div id="historyWrap">
      <table class="history-table" id="historyTable"><thead><tr><th>Час</th><th>Сигнали</th><th>Аналізи</th><th>Активні</th></tr></thead><tbody></tbody></table>
      <div style="margin-top:8px;display:flex;gap:8px"><button id="clearHistory" class="btn ghost">Очистити історію</button><button id="downloadHistory" class="btn">Завантажити історію</button></div>
    </div>
  </div>

</section>

<aside class="right">
  <div class="card">
    <h3 style="margin:0 0 8px 0;color:#dff6ef">Глобальна аналітика</h3>
    <div class="chart-wrap"><canvas id="chart1"></canvas></div>
    <div style="height:12px"></div>
    <div class="chart-wrap"><canvas id="chart2"></canvas></div>
    <div style="height:12px"></div>
    <div class="chart-wrap"><canvas id="chart3"></canvas></div>
  </div>

  <div style="margin-top:12px" class="card">
    <h4 style="margin:0 0 8px 0;color:#dff6ef">Налаштування головного мозку</h4>
    <div style="display:flex;flex-direction:column;gap:8px">
      <label><input id="autosync" type="checkbox"/> Автоматичне оновлення (10s)</label>
      <label>Рівень чутливості: <input id="sensitivity" type="range" min="1" max="10" value="6"/></label>
      <label>Режим даних:
        <select id="dataMode"><option value="sim">Симулятор</option><option value="api">Локальний API (fetch /api/metrics)</option></select>
      </label>
      <button id="resetBtn" class="btn ghost">Скинути дані (симулятор)</button>
    </div>
  </div>

</aside>

  </main>  <footer>Jarviz 12 • Enhanced Demo • Збережено локально</footer>  <!-- lightweight service worker registration + manifest (inline blob) -->  <script>
    // minimal manifest for PWA install prompt support
    const manifest = {
      name: "Jarviz 12",
      short_name: "Jarviz",
      start_url: ".",
      display: "standalone",
      background_color: "#070709",
      theme_color: "#06b6a4"
    };
    const mblob = new Blob([JSON.stringify(manifest)],{type:'application/json'});
    const murl = URL.createObjectURL(mblob);
    const link = document.createElement('link'); link.rel='manifest'; link.href=murl; document.head.appendChild(link);

    // PWA install prompt handling
    let deferredPrompt;
    const installBtn = document.getElementById('installBtn');
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault(); deferredPrompt = e; installBtn.style.display = 'inline-block';
    });
    installBtn.addEventListener('click', async () => {
      if (deferredPrompt) { deferredPrompt.prompt(); const { outcome } = await deferredPrompt.userChoice; deferredPrompt = null; }
      else alert('Встановлення: додати на головний екран через браузер');
    });

    // Service worker simple caching
    const swCode = `self.addEventListener('install',e=>{self.skipWaiting();});self.addEventListener('fetch',e=>{e.respondWith(fetch(e.request).catch(()=>caches.match(e.request)))});`;
    const swBlob = new Blob([swCode],{type:'text/javascript'});
    const swUrl = URL.createObjectURL(swBlob);
    if('serviceWorker' in navigator){navigator.serviceWorker.register(swUrl).catch(()=>{});}
  </script>  <script>
    // === Data layer (supports simulator or fetch to /api/metrics) ===
    let stats = { signalsPerMin:0, analyses:0, active:0 };
    const neuronData = {};
    const NUM_NEURONS = 12;

    function randomInt(min,max){return Math.floor(Math.random()*(max-min+1))+min}

    // create neurons in SVG dynamically for more flexibility
    const neuronsGroup = document.getElementById('neurons');
    function createNeurons(){
      const positions = [ [200,200],[350,160],[520,220],[700,180],[920,240],[900,320],[700,360],[550,400],[350,420],[220,340],[620,100],[980,120] ];
      neuronsGroup.innerHTML = '';
      for(let i=0;i<NUM_NEURONS;i++){
        const id = i+1;
        const [x,y] = positions[i] || [100+ i*40, 100 + (i%5)*40];
        const g = document.createElementNS('http://www.w3.org/2000/svg','g');
        g.setAttribute('class','neuron'); g.dataset.id = id;
        g.setAttribute('transform',`translate(${x},${y})`);
        const c = document.createElementNS('http://www.w3.org/2000/svg','circle');
        c.setAttribute('r',20); c.setAttribute('fill','#052b2a'); c.setAttribute('stroke','#06b6a4'); c.setAttribute('stroke-width',2.5);
        g.appendChild(c);
        neuronsGroup.appendChild(g);
        // initial data
        neuronData[id] = { id, name: 'Neuron '+id, load: randomInt(1,100), errors: randomInt(0,6) };

        // click handler
        g.addEventListener('click', ()=> showNeuronInfo(id));
      }
    }
    createNeurons();

    function showNeuronInfo(id){const d = neuronData[id]; const el = document.getElementById('neuronInfo'); el.innerHTML = `<b>${d.name}</b><br>Завантаження: ${d.load}%<br>Помилок: ${d.errors}<br><div style=\"margin-top:8px\"><button id=neuroTune class='btn'>Оптимізувати</button> <button id=neuroStress class='btn ghost'>Стрес тест</button></div>`; document.getElementById('neuroTune').addEventListener('click', ()=>{ d.load = Math.max(1,d.load - randomInt(6,24)); d.errors = Math.max(0,d.errors - randomInt(0,3)); alert('Оптимізація завершена'); showNeuronInfo(id); updateUI(); }); document.getElementById('neuroStress').addEventListener('click', ()=>{ d.load = Math.min(100,d.load + randomInt(8,30)); d.errors += randomInt(0,3); alert('Стрес тест завершено'); showNeuronInfo(id); updateUI(); }); }

    // charts setup
    const ctx1 = document.getElementById('chart1').getContext('2d');
    const ctx2 = document.getElementById('chart2').getContext('2d');
    const ctx3 = document.getElementById('chart3').getContext('2d');

    const createSpark = (ctx,label,opts) => new Chart(ctx,{type:opts?.type||'line',data:{labels:[],datasets:[{label:label,data:[],tension:0.35,fill:true,pointRadius:0}]},options:{plugins:{legend:{display:false}},scales:{x:{display:false},y:{display:false}}}});
    const chart1 = createSpark(ctx1,'Сигнали');
    const chart2 = createSpark(ctx2,'Аналізи');
    const chart3 = new Chart(ctx3,{type:'doughnut',data:{labels:['Активні','Неактивні'],datasets:[{data:[0,0]}]},options:{plugins:{legend:{position:'bottom'}}}});

    function addChartPoint(chart,value){chart.data.labels.push(''); chart.data.datasets[0].data.push(value); if(chart.data.labels.length>36){chart.data.labels.shift(); chart.data.datasets[0].data.shift()} chart.update(); }

    // history
    function pushHistoryEntry(s){ const h = JSON.parse(localStorage.getItem('jarviz-history')||'[]'); h.push(s); localStorage.setItem('jarviz-history',JSON.stringify(h)); renderHistory(); }
    function renderHistory(){ const h = JSON.parse(localStorage.getItem('jarviz-history')||'[]'); const tbody = document.querySelector('#historyTable tbody'); tbody.innerHTML = ''; h.slice(-30).reverse().forEach(it=>{ const tr = document.createElement('tr'); tr.innerHTML = `<td>${new Date(it.ts).toLocaleString()}</td><td>${it.signalsPerMin}</td><td>${it.analyses}</td><td>${it.active}</td>`; tbody.appendChild(tr); }); }
    document.getElementById('clearHistory').addEventListener('click', ()=>{ if(confirm('Очистити історію?')){ localStorage.removeItem('jarviz-history'); renderHistory(); } });
    document.getElementById('downloadHistory').addEventListener('click', ()=>{ const h = JSON.parse(localStorage.getItem('jarviz-history')||'[]'); const csv = ['time,signals,analyses,active', ...h.map(r=>`${new Date(r.ts).toISOString()},${r.signalsPerMin},${r.analyses},${r.active}`)].join('\n'); const blob = new Blob([csv],{type:'text/csv'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'jarviz-history.csv'; a.click(); URL.revokeObjectURL(url); });

    // export JSON
    document.getElementById('exportBtn').addEventListener('click', ()=>{ const blob = new Blob([JSON.stringify({stats,neuronData,ts:Date.now()},null,2)],{type:'application/json'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href=url; a.download='jarviz12-analytics.json'; a.click(); URL.revokeObjectURL(url); });
    document.getElementById('exportCSV').addEventListener('click', ()=>{ const csv = ['neuron,load,errors', ...Object.values(neuronData).map(n=>`${n.id},${n.load},${n.errors}`)].join('\n'); const blob = new Blob([csv],{type:'text/csv'}); const url = URL.createObjectURL(blob); const a = document.createElement('a'); a.href = url; a.download = 'neurons.csv'; a.click(); URL.revokeObjectURL(url); });

    // update logic - supports two modes: sim (random) or api (fetch /api/metrics)
    async function fetchMetrics(){
      const mode = document.getElementById('dataMode').value;
      if(mode === 'api'){
        try{
          const res = await fetch('/api/metrics');
          if(!res.ok) throw new Error('no api');
          const j = await res.json(); return j;
        }catch(e){ console.warn('API fetch failed, falling back to simulator'); return simulateMetrics(); }
      } else return simulateMetrics();
    }

    function simulateMetrics(){
      // vary values slightly based on sensitivity
      const sens = Number(document.getElementById('sensitivity').value||6);
      stats.signalsPerMin = Math.max(1, stats.signalsPerMin + randomInt(-8,12) + (sens-6));
      stats.analyses = Math.max(1, stats.analyses + randomInt(-5,8));
      stats.active = Math.max(1, Math.min(NUM_NEURONS, randomInt(2,NUM_NEURONS)));
      // update neuron loads/errors randomly
      Object.values(neuronData).forEach(n=>{ n.load = Math.max(1, Math.min(100, n.load + randomInt(-10,10))); n.errors = Math.max(0, n.errors + randomInt(-1,1)); });
      return { stats, neuronData };
    }

    function updateUI(){
      document.getElementById('stat-1').textContent = stats.signalsPerMin;
      document.getElementById('stat-2').textContent = stats.analyses;
      document.getElementById('stat-3').textContent = stats.active;
      document.getElementById('lastUpdate').textContent = new Date().toLocaleTimeString();

      // animate neurons based on load
      Object.values(neuronData).forEach(n=>{
        const g = document.querySelector(`.neuron[data-id=\"${n.id}\"]`);
        if(!g) return;
        const c = g.querySelector('circle');
        const size = 14 + Math.round(n.load/6);
        c.setAttribute('r', size);
        // color by load
        const green = Math.max(20, 200 - Math.round(n.load*1.2));
        const color = `rgb(${Math.min(240,n.load*2.4)}, ${green}, ${Math.max(30,200-green)})`;
        c.setAttribute('fill', color);
        // pulse class when load high
        if(n.load > 70) g.classList.add('pulse'); else g.classList.remove('pulse');
      });

      // charts
      addChartPoint(chart1, stats.signalsPerMin);
      addChartPoint(chart2, stats.analyses);
      chart3.data.datasets[0].data = [stats.active, Math.max(0, NUM_NEURONS - stats.active)]; chart3.update();

      // push to history
      pushHistoryEntry({ ts: Date.now(), ...stats });
    }

    // initial seeding
    stats = { signalsPerMin: randomInt(30,100), analyses: randomInt(10,60), active: randomInt(2,8) };
    for(let i=0;i<NUM_NEURONS;i++){ neuronData[i+1] = { id:i+1, name:'Neuron '+(i+1), load: randomInt(10,90), errors: randomInt(0,6) }; }
    for(let i=0;i<6;i++){ const res = simulateMetrics(); updateUI(); }
    renderHistory();

    document.getElementById('refreshData').addEventListener('click', async ()=>{ const m = await fetchMetrics(); if(m){ stats = m.stats ?? m; Object.assign(neuronData, m.neuronData ?? m.neuronData); updateUI(); } });

    // autosync
    let autosyncTimer = null;
    document.getElementById('autosync').addEventListener('change',(e)=>{
      clearInterval(autosyncTimer);
      if(e.target.checked){ autosyncTimer = setInterval(async ()=>{ const m = await fetchMetrics(); if(m){ stats = m.stats ?? m; Object.assign(neuronData, m.neuronData ?? m.neuronData); updateUI(); } }, 10000); }
    });

    document.getElementById('resetBtn').addEventListener('click', ()=>{ chart1.data.labels=[]; chart1.data.datasets[0].data=[]; chart1.update(); chart2.data.labels=[]; chart2.data.datasets[0].data=[]; chart2.update(); chart3.data.datasets[0].data=[0,NUM_NEURONS]; chart3.update(); localStorage.removeItem('jarviz-history'); alert('Симулятор перезапущено'); renderHistory(); });

    // Web Speech synthesis (voice responses)
    const voiceBtn = document.getElementById('voiceBtn');
    let voiceOn = false; voiceBtn.addEventListener('click', ()=>{ if(!('speechSynthesis' in window)){alert('Голос недоступний у цьому браузері');return;} voiceOn = !voiceOn; voiceBtn.textContent = voiceOn? 'Голос: Вкл':'Голос'; if(voiceOn) speak('Привіт, я Джарвіс дванадцять. Чим допомогти?'); });
    function speak(text){ const u = new SpeechSynthesisUtterance(text); u.lang='uk-UA'; u.rate=1; u.pitch=0.9; window.speechSynthesis.speak(u); }

    // Web Speech Recognition (commands) - experimental (webkit prefix)
    const startRec = document.getElementById('startRec');
    let recActive = false; let recognition = null;
    startRec.addEventListener('click', ()=>{
      if(recActive){ stopRecognition(); return; }
      if(!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)){ alert('Розпізнавання голосу не підтримується у цьому браузері'); return; }
      const SR = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition = new SR(); recognition.lang = 'uk-UA'; recognition.interimResults = false; recognition.maxAlternatives = 1;
      recognition.onstart = ()=>{ recActive = true; startRec.textContent = 'Стоп розпізнавання'; };
      recognition.onresult = (e)=>{ const txt = e.results[0][0].transcript.toLowerCase(); handleVoiceCommand(txt); };
      recognition.onerror = (e)=>{ console.warn(e); stopRecognition(); };
      recognition.onend = ()=>{ recActive = false; startRec.textContent = 'Розпізнати голос'; };
      recognition.start();
    });
    function stopRecognition(){ if(recognition){ recognition.stop(); recognition=null; } recActive=false; startRec.textContent='Розпізнати голос'; }

    function handleVoiceCommand(txt){ // basic command parsing
      console.log('voice cmd:',txt);
      if(txt.includes('онови') || txt.includes('оновити') || txt.includes('оновлення')){ document.getElementById('refreshData').click(); speak('Оновлення даних запущено'); }
      else if(txt.includes('авто') || txt.includes('автоматичне')){ const cb = document.getElementById('autosync'); cb.checked = !cb.checked; cb.dispatchEvent(new Event('change')); speak(cb.checked? 'Автоматичне оновлення вмикаю' : 'Автоматичне оновлення вимикаю'); }
      else if(txt.includes('експорт') || txt.includes('завантаж')){ document.getElementById('exportBtn').click(); speak('Експортую дані'); }
      else if(txt.includes('стан нейрон') || txt.includes('нейрон')){ // try to find number
        const num = txt.match(/\d+/); if(num){ showNeuronInfo(Number(num[0])); speak('Показую інформацію про нейрон '+num[0]); } else { speak('Скажи номер нейрона, наприклад: нейрон 3'); }
      }
      else { speak('Команду не розпізнано'); }
    }

    // simple keyboard shortcuts
    window.addEventListener('keydown',(e)=>{ if(e.key==='r') document.getElementById('refreshData').click(); if(e.key==='e') document.getElementById('exportBtn').click(); });

    // try to load persisted state (neuron sizes, history)
    window.addEventListener('load', ()=>{ renderHistory(); });

    // beforeunload persistence
    window.addEventListener('beforeunload', ()=>{ localStorage.setItem('jarviz-last', JSON.stringify({stats,neuronData})); });

    // small helpful hint: try voice commands: "онови", "експорт", "автоматичне", "нейрон 3"
  </script></body>
</html>
